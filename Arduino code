#include <SPI.h>
#include <MFRC522.h>
#define SS_PIN 10
#define RST_PIN 9
#define EXIT_BUTTON_PIN 2
#define SIM_BUTTON_PIN 5
#include <SoftwareSerial.h>
#include <LiquidCrystal_I2C.h>  //include LCD I2C Library
LiquidCrystal_I2C lcd(0x27,16,2);  //I2C scanned address defined + I2C screen size

// Create software serial object to communicate with SIM800L
SoftwareSerial mySerial(3, 4); // SIM800L Tx & Rx is connected to Arduino #3 & #4

const int buzzer = 8; //buzzer to arduino pin 8

MFRC522 mfrc522(SS_PIN, RST_PIN);  // Create MFRC522 instance

byte card1Data[] = {0x73, 0x1B, 0x14, 0xB7};   //B
byte card2Data[] = {0xF2, 0x18, 0xD3, 0x20};   //W

int amount = 10, sum = 0,amount1 = 20;

bool exitButtonPressed = false;
bool simButtonPressed = false;

char p1[]=" Pen",p2[]="Book";

void setup() {
  Serial.begin(9600);   // Initialize serial communication
  SPI.begin();          // Init SPI bus
  mfrc522.PCD_Init();   // Init MFRC522
  
  pinMode(EXIT_BUTTON_PIN, INPUT_PULLUP);  // Set exit button pin as input with internal pull-up resistor
  pinMode(SIM_BUTTON_PIN, INPUT_PULLUP);
  pinMode(buzzer, OUTPUT); // Set buzzer - pin 8 as an output

  Serial.println("Smart_Trolley using Arduino");
  Serial.println();
  Serial.println("WELCOME");
  Serial.println("Please scan an item");
  Serial.println();

  lcd.init();  
  lcd.clear();lcd.backlight();lcd.setCursor(0,0);lcd.print("Smart_Trolley ");lcd.setCursor(2,1);lcd.print(" using Arduino");delay(1000);
  lcd.clear();lcd.setCursor(0,0);lcd.print(" W E L C O M E ");delay(1000);
  lcd.clear();lcd.setCursor(0,0);lcd.print("Please scan ");lcd.setCursor(6,1);lcd.print("an item");delay(1000); 
}

void loop() {
// Check if the exit button is pressed
  if (digitalRead(SIM_BUTTON_PIN) == LOW) {
    if (!simButtonPressed) {
      simButtonPressed = true;
      Serial.println();
      Serial.println("Shopping completed.");
      lcd.clear();lcd.setCursor(0,0);lcd.print("Shopping ");lcd.setCursor(6,1);lcd.print("completed");delay(1000);
      // Begin serial communication with Arduino and SIM800L
      mySerial.begin(9600);
      Serial.println("Initializing...");
      lcd.clear();lcd.setCursor(0,0);lcd.print("Billing ");lcd.setCursor(4,1);lcd.print("Initializing...");delay(1000);
      mySerial.println("AT"); // Once the handshake test is successful, it will respond with "OK"
      updateSerial();
      mySerial.println("AT+CMGF=1"); // Configuring TEXT mode
      updateSerial();
      mySerial.println("AT+CNMI=2,2,0,0,0"); // Set module to send SMS data to serial out upon receipt
      updateSerial();
      // Send an SMS
      sendSMS(" mobile number ", sum); // Replace with the phone number and message content you desire
      delay(5000); // Wait for 5 seconds before making a call
      makeCall("mobile number "); // Replace with the phone number you want to call
      delay(10000); // Wait for 10 seconds
      hangUpCall(); // Hang up the call
    }
  } 
  else {
    simButtonPressed = false;}
    // Check if the exit button is pressed
    if (digitalRead(EXIT_BUTTON_PIN) == LOW) {
      if (!exitButtonPressed) {
        exitButtonPressed = true;
        Serial.println();
        Serial.println("Shopping completed.");
        Serial.print("Total amount: ");
        Serial.print(sum);Serial.println(" Rs");
        Serial.println();
        Serial.println("please scan to remove item");
        Serial.println();
        lcd.clear();lcd.setCursor(0,0);lcd.print("Shopping ");lcd.setCursor(4,1);lcd.print("completed");delay(1000);
        lcd.clear();lcd.setCursor(0,0);lcd.print("Total amount ");lcd.setCursor(1,1);lcd.print(sum);lcd.setCursor(4,1);lcd.print("Rs");delay(1000);
        lcd.clear();lcd.setCursor(0,0);lcd.print("please scan to ");lcd.setCursor(4,1);lcd.print("remove item");delay(1000);
        removalFunction(sum);
      }
    } 
    else {
      exitButtonPressed = false;
      // Look for new RFID cards
      if (mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial()) {
        byte cardData[4];
        for (byte i = 0; i < 4; i++) {
          cardData[i] = mfrc522.uid.uidByte[i];
        }
      // Compare card data to identify the card
      if (compareCardData(cardData, card1Data)) {
        sum = calculation(amount,p1,'+');
      } 
      else if (compareCardData(cardData, card2Data)) {
        sum = calculation(amount1,p2,'+');
      } 
      else {
        Serial.println("Scanning failed.... Retry");
        lcd.clear();lcd.setCursor(0,0);lcd.print("Scanning failed.... ");lcd.setCursor(4,1);lcd.print("Retry");delay(1000);
      }     
      mfrc522.PICC_HaltA();  // Halt PICC
      mfrc522.PCD_StopCrypto1();  // Stop encryption on PCD
    }
  }
}

bool compareCardData(byte* cardData1, byte* cardData2) {
  for (byte i = 0; i < 4; i++) {
    if (cardData1[i] != cardData2[i]) {
      return false;
    }
  }
  return true;
}

int removalFunction(int sum ) {
repeat:
 if (digitalRead(EXIT_BUTTON_PIN) == LOW) {
    if (!exitButtonPressed) {
      exitButtonPressed = true;
      Serial.println("Shopping completed.");
      Serial.println();
      lcd.clear();lcd.setCursor(0,0);lcd.print("Shopping");lcd.setCursor(4,1);lcd.print("completed");delay(1000);
      return sum;
    }
  } 
  else {
    exitButtonPressed = false;}
    // Look for new RFID cards
    if (mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial()) {
      byte cardData[4];
      for (byte i = 0; i < 4; i++) {
        cardData[i] = mfrc522.uid.uidByte[i];
      }
      // Compare card data to identify the card
      if (compareCardData(cardData, card1Data)) {
        sum = calculation(amount,p1,'-');
      } 
      else if (compareCardData(cardData, card2Data)) {
       sum = calculation(amount1,p2,'-');
      } 
      else {
        Serial.println("Scanning failed.... Retry");
        lcd.clear();lcd.setCursor(0,0);lcd.print("Scanning failed.... ");lcd.setCursor(4,1);lcd.print("Retry");delay(1000);
      }
      mfrc522.PICC_HaltA();  // Halt PICC
      mfrc522.PCD_StopCrypto1();  // Stop encryption on PCD
    }
    goto repeat ;
  }

void makeCall(String phoneNumber) {
  mySerial.println("ATD" + phoneNumber + ";"); // ATD command to dial the phone number
  updateSerial();
}

void hangUpCall() {
  mySerial.println("ATH"); // ATH command to hang up the call
  updateSerial();
}

void sendSMS(String phoneNumber, int message) {
  mySerial.println("AT+CMGS=\"" + phoneNumber + "\""); // AT+CMGS command to send an SMS
  updateSerial();
  mySerial.print(message); // Message content
  updateSerial();
  mySerial.write(26); // Ctrl+Z character to end the SMS
  updateSerial();
}

void updateSerial() {
  delay(500);
  while (Serial.available()) {
    mySerial.write(Serial.read()); // Forward what Serial received to Software Serial Port
  }
  while (mySerial.available()) {
    Serial.write(mySerial.read()); // Forward what Software Serial received to Serial Port
  }
}

int calculation(int amount,char p[],char op){
   if (op=='+'){
        alarm();
        sum += amount;
        if (sum <= 120){
          Serial.print(p);Serial.println(" added to cart");
          lcd.clear();lcd.setCursor(0,0);lcd.print(p);lcd.setCursor(5,0);lcd.print("added ");lcd.setCursor(4,1);lcd.print(" to cart");delay(1000);
          Serial.print("Total amount: ");
          Serial.print(sum);Serial.println(" Rs");
          Serial.print(p);Serial.println(" added successfully");
          lcd.clear();lcd.setCursor(0,0);lcd.print("Total amount: ");lcd.setCursor(1,1);lcd.print(sum);lcd.setCursor(4,1);lcd.print(" Rs");delay(1000);
          lcd.clear();lcd.setCursor(0,0);lcd.print(p);lcd.setCursor(5,0);lcd.print("added");lcd.setCursor(4,1);lcd.print(" successfully");delay(1000);
          Serial.println();
          Serial.println("Please scan an item");
          Serial.println();
          lcd.clear();lcd.setCursor(0,0);lcd.print("Please scan");lcd.setCursor(4,1);lcd.print("an item");delay(1000);
          }
          else{
            Serial.print(p);Serial.println(" can't add to cart");
            lcd.clear();lcd.setCursor(0,0);lcd.print(p);lcd.setCursor(5,0);lcd.print("can't add ");lcd.setCursor(4,1);lcd.print(" to cart");delay(1000);
            Serial.println();
            Serial.println("The amount exceed");
            Serial.println();
            lcd.clear();lcd.setCursor(0,0);lcd.print("The amount");lcd.setCursor(5,1);lcd.print("exceed");delay(1000);
            Serial.println();
            Serial.println("Please scan an item");
            Serial.println();
            lcd.clear();lcd.setCursor(0,0);lcd.print("Please scan");lcd.setCursor(4,1);lcd.print("an item");delay(1000);
          }
        
        return sum;
        }
   else{
        alarm();
        sum = max(0, sum - amount);
        if (sum>0){
          Serial.print(p);Serial.println(" removed from cart");
          lcd.clear();lcd.setCursor(0,0);lcd.print(p);lcd.setCursor(5,0);lcd.print("removed ");lcd.setCursor(4,1);lcd.print(" from cart");delay(1000);
          Serial.print("Total amount: ");
          Serial.print(sum);Serial.println(" Rs");
          Serial.print(p);Serial.println("  removed successfully");
          lcd.clear();lcd.setCursor(0,0);lcd.print("Total amount: ");lcd.setCursor(1,1);lcd.print(sum);lcd.setCursor(4,1);lcd.print(" Rs");delay(1000);
          lcd.clear();lcd.setCursor(0,0);lcd.print(p);lcd.setCursor(5,0);lcd.print("removed");lcd.setCursor(4,1);lcd.print(" successfully");delay(1000);
          Serial.println();
          Serial.println("Please scan an item");
          Serial.println();
          lcd.clear();lcd.setCursor(0,0);lcd.print("Please scan");lcd.setCursor(4,1);lcd.print("an item");delay(1000);
        }
        else{
          Serial.println();
          Serial.println("No item for removal");
          Serial.println();
          lcd.clear();lcd.setCursor(0,0);lcd.print("No item");lcd.setCursor(4,1);lcd.print("for removal");delay(1000);
        }
     }     
  }

void alarm(){
        tone(buzzer, 2000); // Send 1KHz sound signal...
        delay(250);        // ...for 1 sec
        noTone(buzzer);     // Stop sound...
        delay(250);        // ...for 1sec
  }
